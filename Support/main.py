import asyncio
import json
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, WebAppInfo,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

WEBAPP_URL = "https://ka4erda1337.github.io/Pubg_UC_Shop.io/"

bot = Bot(
    token="8281789014:AAFE4DAnRWxj-b0l5yzXMiPe3A5QtqRGpDQ",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())

conn = sqlite3.connect('support.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS support_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        email TEXT,
        message TEXT,
        timestamp TEXT
    )
''')
conn.commit()

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('''
            INSERT INTO support_messages (user_id, name, email, message, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, data['name'], data['email'], data['message'], timestamp))
        conn.commit()

        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

@dp.message(F.text == "/support_list")
async def support_list(message: types.Message):
    ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    cursor.execute('SELECT * FROM support_messages')
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ.")
        return

    response = "<b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
    for row in rows:
        response += (
            f"ID: {row[0]}\n"
            f"User ID: {row[1]}\n"
            f"–ò–º—è: {row[2]}\n"
            f"Email: {row[3]}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {row[4]}\n"
            f"–í—Ä–µ–º—è: {row[5]}\n\n"
        )

    await message.answer(response)

@dp.message(F.text.startswith("/delete_support"))
async def delete_support(message: types.Message):
    ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_support <id>")
            return

        msg_id = int(parts[1])
        cursor.execute('DELETE FROM support_messages WHERE id = ?', (msg_id,))
        conn.commit()

        if cursor.rowcount > 0:
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {msg_id} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer(
        "<b>üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UC SHOP PUBG MOBILE!</b>\n\n"
        "üíé –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ UC –ø–æ —Å–∞–º—ã–º –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º!\n\n"
        "üëâ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å <i>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i> –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø–∞–∫–µ—Ç.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üí† –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω UC",
                    web_app=WebAppInfo(url=WEBAPP_URL + "Support/index.html")
                )
            ]]
        )
    )

@dp.message(F.text == "/app")
async def app_handler(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí† –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω UC", web_app=WebAppInfo(url=WEBAPP_URL + "Support/index.html"))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ WebApp üëá", reply_markup=markup)

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())